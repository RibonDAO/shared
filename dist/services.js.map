{"version":3,"file":"services.js","sources":["../src/services/apiTheGraph/index.tsx","../src/services/apiTheGraph/querys/pool/index.ts","../src/services/apiTheGraph/poolsApi/index.tsx","../src/services/apiTheGraph/querys/promoterDonation/index.tsx","../src/services/apiTheGraph/promoterDonationsApi/index.tsx","../src/services/api/creditCardPaymentApi/index.ts","../src/services/api/donationImpactsApi/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nimport { THE_GRAPH_API } from 'utils/constants';\nimport fetch from 'cross-fetch';\n\nconst APIURL = THE_GRAPH_API;\n\nexport const client = new ApolloClient({\n  uri: APIURL,\n  cache: new InMemoryCache(),\n  link: new HttpLink({ uri: APIURL, fetch }),\n});\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_POOLS_QUERY_NAME = \"INTEGRATION_ID_QUERY\";\nexport const POOL_ID_QUERY_NAME = \"POOL_ID_QUERY\";\n\nexport const QUERY_ALL_POOLS = gql`\n  query ${ALL_POOLS_QUERY_NAME} {\n    pools {\n      id\n      balance\n    }\n  }\n`;\n\nexport const QUERY_POOL_ID = gql`\n  query ${POOL_ID_QUERY_NAME}($pool: Bytes!) {\n    pools(\n      where: { id: $pool }\n    ) {\n      id\n      balance\n    }\n  }\n`;\n","import { ApolloQueryResult } from \"@apollo/client\";\nimport { client } from \"..\";\nimport { QUERY_ALL_POOLS, QUERY_POOL_ID } from \"../querys/pool\";\n\nexport const poolsApi = {\n  fetchAllPools: (): Promise<ApolloQueryResult<any>> =>\n    client.query({\n      query: QUERY_ALL_POOLS,\n      fetchPolicy: \"no-cache\",\n    }),\n\n  fetchPool: (pool: string): Promise<ApolloQueryResult<any>> =>\n    client.query({\n      query: QUERY_POOL_ID,\n      variables: { pool },\n      fetchPolicy: \"no-cache\",\n    }),\n};\n\nexport default poolsApi;\n","import { gql } from \"@apollo/client\";\n\nexport const PROMOTER_DONATIONS_ID_QUERY_NAME = \"PROMOTER_DONATIONS_ID_QUERY\";\nexport const ALL_PROMOTERS_DONATIONS_QUERY_NAME =\n  \"ALL_PROMOTERS_DONATIONS_QUERY\";\n\nexport const QUERY_PROMOTER_DONATION_ID = gql`\n  query ${PROMOTER_DONATIONS_ID_QUERY_NAME}($promoter: Bytes!, $first: Int) {\n     promoterDonations(where: {promoter: $promoter}\n      orderBy: timestamp\n      orderDirection: desc\n      first: $first\n    ) {\n      id\n      amountDonated\n      timestamp\n    }\n  }\n`;\n\nexport const QUERY_ALL_PROMOTERS_DONATIONS = gql`\n  query ${ALL_PROMOTERS_DONATIONS_QUERY_NAME}($first: Int) {\n    promoterDonations(\n      orderBy: timestamp\n      orderDirection: desc\n      first: $first\n    ) {\n      id\n      amountDonated\n      timestamp\n    }\n  }\n`;\n","import { ApolloQueryResult } from \"@apollo/client\";\nimport { client } from \"..\";\nimport {\n  QUERY_PROMOTER_DONATION_ID,\n  QUERY_ALL_PROMOTERS_DONATIONS,\n} from \"../querys/promoterDonation\";\n\nexport const promoterDonationsApi = {\n  fetchPromoterDonations: (\n    promoter: string,\n    first: number,\n  ): Promise<ApolloQueryResult<any>> =>\n    client.query({\n      query: QUERY_PROMOTER_DONATION_ID,\n      variables: {\n        promoter,\n        first,\n      },\n      fetchPolicy: \"no-cache\",\n    }),\n\n  fetchAllPromotersDonations: (\n    first: number,\n  ): Promise<ApolloQueryResult<any>> =>\n    client.query({\n      query: QUERY_ALL_PROMOTERS_DONATIONS,\n      variables: {\n        first,\n      },\n      fetchPolicy: \"no-cache\",\n    }),\n};\n\nexport default promoterDonationsApi;\n","import { AxiosResponse } from \"axios\";\nimport CreditCardPayment from \"types/entities/CreditCardPayment\";\nimport { apiPost } from \"..\";\n\nconst creditCardPaymentApi = {\n  postCreditCardPayment: (\n    paymentInformation: CreditCardPayment,\n  ): Promise<AxiosResponse<CreditCardPayment>> =>\n    apiPost(\"payments/credit_cards\", paymentInformation),\n};\n\nexport default creditCardPaymentApi;\n","import { AxiosResponse } from \"axios\";\nimport { apiGet } from \"..\";\n\nconst donationImpactsApi = {\n  getDonationImpact: (): Promise<AxiosResponse<any>> => apiGet(\"users/impact\"),\n};\n\nexport default donationImpactsApi;\n"],"names":["APIURL","THE_GRAPH_API","client","ApolloClient","uri","cache","InMemoryCache","link","HttpLink","fetch","ALL_POOLS_QUERY_NAME","POOL_ID_QUERY_NAME","QUERY_ALL_POOLS","gql","QUERY_POOL_ID","poolsApi","fetchAllPools","query","fetchPolicy","fetchPool","pool","variables","PROMOTER_DONATIONS_ID_QUERY_NAME","ALL_PROMOTERS_DONATIONS_QUERY_NAME","QUERY_PROMOTER_DONATION_ID","QUERY_ALL_PROMOTERS_DONATIONS","promoterDonationsApi","fetchPromoterDonations","promoter","first","fetchAllPromotersDonations","creditCardPaymentApi","postCreditCardPayment","paymentInformation","apiPost","donationImpactsApi","getDonationImpact","apiGet"],"mappings":"ssBAIMA,OAASC,0BAEFC,OAAS,IAAIC,sBAAa,CACrCC,IAAKJ,OACLK,MAAO,IAAIC,uBACXC,KAAM,IAAIC,kBAAS,CAAEJ,IAAKJ,OAAQS,gBCPvBC,qBAAuB,uBACvBC,mBAAqB,gBAErBC,gBAAkBC,oJAAG,aACJ,2DAApBH,sBAQGI,cAAgBD,uMAAG,aACJ,8GAAlBF,oBCXGI,SAAW,CACtBC,cAAe,WACb,OAAAd,OAAOe,MAAM,CACXA,MAAOL,gBACPM,YAAa,cAGjBC,UAAW,SAACC,GACV,OAAAlB,OAAOe,MAAM,CACXA,MAAOH,cACPO,UAAW,CAAED,QACbF,YAAa,eCbNI,iCAAmC,8BACnCC,mCACX,gCAEWC,2BAA6BX,2UAAG,aACH,8OAAhCS,kCAaGG,8BAAgCZ,2RAAG,aACJ,8LAAlCU,oCCdGG,qBAAuB,CAClCC,uBAAwB,SACtBC,EACAC,GAEA,OAAA3B,OAAOe,MAAM,CACXA,MAAOO,2BACPH,UAAW,CACTO,WACAC,SAEFX,YAAa,cAGjBY,2BAA4B,SAC1BD,GAEA,OAAA3B,OAAOe,MAAM,CACXA,MAAOQ,8BACPJ,UAAW,CACTQ,SAEFX,YAAa,eCzBba,qBAAuB,CAC3BC,sBAAuB,SACrBC,GAEA,OAAAC,cAAQ,wBAAyBD,KCL/BE,mBAAqB,CACzBC,kBAAmB,WAAmC,OAAAC,aAAO"}