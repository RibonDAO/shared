{"version":3,"file":"index-828e0330.js","sources":["../src/services/api/index.ts","../src/services/api/usersApi/index.ts","../src/services/api/givingFeesApi/index.ts","../src/services/api/causesApi/index.ts","../src/services/api/cryptoTransactionsApi/index.ts","../src/services/api/donationsApi/index.ts","../src/services/api/impactApi/index.ts","../src/services/api/integrationsApi/index.ts","../src/services/api/nonProfitImpactApi/index.ts","../src/services/api/offersApi/index.ts","../src/services/api/promoterCardGivingsApi/index.ts","../src/services/api/sourcesApi/index.ts","../src/services/api/storiesApi/index.ts"],"sourcesContent":["import Axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport camelCaseKeys from \"camelcase-keys\";\nimport snakeCaseKeys from \"snakecase-keys\";\nconst RIBON_API =\n  process.env.REACT_APP_RIBON_API ||\n  \"http://ribon-core-api-dev.us-east-1.elasticbeanstalk.com/\";\n\nexport const baseURL = RIBON_API;\nexport const API_SCOPE = \"/api/v1\";\n\nconst api = Axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  validateStatus: (status) => status >= 200 && status < 300,\n});\n\napi.interceptors.request.use((request) =>\n  request?.data\n    ? { ...request, data: snakeCaseKeys(request?.data, { deep: true }) }\n    : request,\n);\n\napi.interceptors.response.use(\n  (response) => ({\n    ...response,\n    data: camelCaseKeys(response.data, { deep: true }),\n  }),\n  (error) => Promise.reject(error),\n);\n\nexport function apiGet(url: string, config?: AxiosRequestConfig) {\n  if (config) return api.get(`${API_SCOPE}/${url}`, config);\n\n  return api.get(`${API_SCOPE}/${url}`);\n}\n\nexport function apiPost(url: string, data: any, config?: AxiosRequestConfig) {\n  if (config) return api.post(`${API_SCOPE}/${url}`, data, config);\n\n  return api.post(`${API_SCOPE}/${url}`, data);\n}\n\nexport function apiPut(url: string, data: any, config?: AxiosRequestConfig) {\n  if (config) return api.put(`${API_SCOPE}/${url}`, data, config);\n\n  return api.put(`${API_SCOPE}/${url}`, data);\n}\n\nexport function apiDelete(url: string, config?: AxiosRequestConfig) {\n  if (config) return api.delete(`${API_SCOPE}/${url}`, config);\n\n  return api.delete(`${API_SCOPE}/${url}`);\n}\n\nexport function emptyRequest(): Promise<AxiosResponse<any, any>> {\n  return {} as Promise<AxiosResponse>;\n}\n\nexport default api;\n","import { AxiosResponse } from \"axios\";\nimport User from \"types/entities/User\";\nimport CanDonate from \"types/apiResponses/CanDonate\";\nimport { apiPost } from \"..\";\n\nconst usersApi = {\n  postCreateUser: (email: string): Promise<AxiosResponse<User>> =>\n    apiPost(\"users\", { email }),\n\n  postSearchUser: (email: string): Promise<AxiosResponse<User>> =>\n    apiPost(\"users/search\", { email }),\n\n  postCanDonate: (\n    integrationId: number | string,\n  ): Promise<AxiosResponse<CanDonate>> =>\n    apiPost(\"users/can_donate\", { integrationId }),\n};\n\nexport default usersApi;\n","import { AxiosResponse } from \"axios\";\nimport CardFees from \"types/apiResponses/CardFees\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport { apiPost } from \"..\";\n\nconst givingFeesApi = {\n  postCardFees: (\n    value: number,\n    currency: Currencies,\n  ): Promise<AxiosResponse<CardFees>> =>\n    apiPost(\"givings/card_fees\", {\n      value,\n      currency,\n    }),\n};\n\nexport default givingFeesApi;\n","import { AxiosResponse } from \"axios\";\nimport Cause from \"types/entities/Cause\";\nimport { apiGet } from \"..\";\n\nconst causesApi = {\n  getCauses: (): Promise<AxiosResponse<Cause[]>> => apiGet(\"causes/\"),\n  getCause: (id: number): Promise<AxiosResponse<Cause>> =>\n    apiGet(`causes/${id}`),\n};\n\nexport default causesApi;\n","import { AxiosResponse } from \"axios\";\nimport { TransactionStatus } from \"types/enums/TransactionStatus\";\nimport { apiPost, apiPut } from \"..\";\n\nconst cryptoTransactionApi = {\n  postTransaction: (\n    transactionHash: string,\n    amount: string,\n    walletAddress: string,\n    integrationId: string | number,\n  ): Promise<AxiosResponse<any>> =>\n    apiPost(\"payments/cryptocurrency\", {\n      transactionHash,\n      amount,\n      walletAddress,\n      integrationId,\n    }),\n\n  putTransactionStatus: (\n    transactionHash: string,\n    status: TransactionStatus,\n  ): Promise<AxiosResponse<any>> =>\n    apiPut(\"payments/cryptocurrency\", { transactionHash, status }),\n};\n\nexport default cryptoTransactionApi;\n","import { AxiosResponse } from \"axios\";\nimport Donation from \"types/entities/Donation\";\nimport { apiPost } from \"..\";\n\nconst donationsApi = {\n  postDonation: (\n    integrationId: number,\n    nonProfitId: number,\n    email: string,\n  ): Promise<AxiosResponse<Donation>> =>\n    apiPost(\"donations\", { integrationId, nonProfitId, email }),\n\n  postVoucherDonation: (\n    integrationId: number,\n    nonProfitId: number,\n    email: string,\n    externalId: string,\n  ): Promise<AxiosResponse<Donation>> =>\n    apiPost(\"vouchers/donations\", {\n      integrationId,\n      nonProfitId,\n      email,\n      externalId,\n    }),\n};\n\nexport default donationsApi;\n","import { AxiosResponse } from \"axios\";\nimport Impact from \"types/entities/Impact\";\nimport DonationsCount from \"types/apiResponses/DonationsCount\";\nimport { apiGet } from \"..\";\n\nconst impactApi = {\n  getImpact: (id: number | null): Promise<AxiosResponse<Impact[]>> =>\n    apiGet(`users/${id}/impacts`),\n\n  getDonationsCount: (\n    id: number | null,\n  ): Promise<AxiosResponse<DonationsCount>> =>\n    apiGet(`users/${id}/donations_count`),\n};\n\nexport default impactApi;\n","import { AxiosResponse } from 'axios';\nimport Integration from 'types/entities/Integration';\nimport IntegrationImpact from 'types/apiResponses/IntegrationImpact';\nimport { apiGet } from '..';\n\nconst integrationsApi = {\n  getIntegration: (id: number | string): Promise<AxiosResponse<Integration>> =>\n    apiGet(`integrations/${id}`),\n\n  getIntegrationImpact: (\n    id: number | string,\n    startDate: string,\n    endDate: string,\n  ): Promise<AxiosResponse<IntegrationImpact>> =>\n    apiGet(`integrations/${id}/impacts`, {\n      params: {\n        start_date: startDate,\n        end_date: endDate,\n      },\n    }),\n};\n\nexport default integrationsApi;\n","import { AxiosResponse } from \"axios\";\nimport NonProfit from \"types/entities/NonProfit\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport { apiPost } from \"..\";\n\nconst nonProfitImpactApi = {\n  postImpactByNonProfit: (\n    nonProfitId?: number,\n    value?: number,\n    currency?: Currencies,\n  ): Promise<AxiosResponse<NonProfit[]>> =>\n    apiPost(\"givings/impact_by_non_profit\", {\n      nonProfitId,\n      value,\n      currency,\n    }),\n};\n\nexport default nonProfitImpactApi;\n","import { AxiosResponse } from \"axios\";\nimport Offer from \"types/entities/Offer\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport { apiGet } from \"..\";\n\nconst offersApi = {\n  getOffers: (\n    currency: Currencies,\n    subscription: boolean,\n  ): Promise<AxiosResponse<Offer[]>> =>\n    apiGet(\n      `givings/offers?currency=${currency.toLowerCase()}&subscription=${subscription}`,\n    ),\n  getOffer: (id: number): Promise<AxiosResponse<Offer>> =>\n    apiGet(`givings/offers/${id}`),\n};\n\nexport default offersApi;\n","import { AxiosResponse } from \"axios\";\nimport PromoterCardGiving from \"types/apiResponses/PromoterCardGiving\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport { apiGet } from \"..\";\n\nconst promoterCardGivingsApi = {\n  getPromoterCardGivings: (\n    email: string | undefined,\n    currency: Currencies,\n  ): Promise<AxiosResponse<PromoterCardGiving[]>> =>\n    apiGet(`givings/user_givings?email=${email}&currency=${currency}`),\n};\n\nexport default promoterCardGivingsApi;\n","import { AxiosResponse } from \"axios\";\nimport { apiPost } from \"..\";\n\nconst sourcesApi = {\n  postCreateSource: (\n    userId: number,\n    integrationId: number,\n  ): Promise<AxiosResponse<any>> =>\n    apiPost(\"sources\", { userId, integrationId }),\n};\n\nexport default sourcesApi;\n","import { AxiosResponse } from \"axios\";\nimport Story from \"types/entities/Story\";\nimport { apiGet } from \"..\";\n\nconst storiesApi = {\n  getNonProfitStories: (id: number | string): Promise<AxiosResponse<Story[]>> =>\n    apiGet(`non_profits/${id}/stories`),\n};\n\nexport default storiesApi;\n"],"names":["RIBON_API","process","env","REACT_APP_RIBON_API","baseURL","API_SCOPE","api","Axios","create","headers","Content-Type","validateStatus","status","apiGet","url","config","get","apiPost","data","post","apiPut","put","apiDelete","delete","emptyRequest","interceptors","request","use","snakeCaseKeys","deep","response","camelCaseKeys","error","Promise","reject","usersApi","postCreateUser","email","postSearchUser","postCanDonate","integrationId","givingFeesApi","postCardFees","value","currency","causesApi","getCauses","getCause","id","cryptoTransactionApi","postTransaction","transactionHash","amount","walletAddress","putTransactionStatus","donationsApi","postDonation","nonProfitId","postVoucherDonation","externalId","impactApi","getImpact","getDonationsCount","integrationsApi","getIntegration","getIntegrationImpact","startDate","endDate","params","start_date","end_date","nonProfitImpactApi","postImpactByNonProfit","offersApi","getOffers","subscription","toLowerCase","getOffer","promoterCardGivingsApi","getPromoterCardGivings","sourcesApi","postCreateSource","userId","storiesApi","getNonProfitStories"],"mappings":"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"}