{"version":3,"file":"hooks.js","sources":["../src/services/crashReport/index.ts","../src/hooks/useApi/index.tsx","../src/hooks/useApi/queryClient.tsx","../src/hooks/apiHooks/useCanDonate/index.ts","../src/hooks/apiHooks/useCardGivingFees/index.ts","../src/hooks/apiHooks/useCauses/index.ts","../src/hooks/apiHooks/useCryptoTransaction/index.ts","../src/hooks/apiHooks/useDonations/index.ts","../src/hooks/apiHooks/useImpact/index.ts","../src/hooks/apiHooks/useIntegration/index.ts","../src/hooks/apiHooks/useIntegrationImpact/index.ts","../src/hooks/apiHooks/useNonProfitImpact/index.ts","../src/services/api/nonProfitsApi/index.ts","../src/hooks/apiHooks/useNonProfits/index.ts","../src/hooks/apiHooks/useOffers/index.ts","../src/hooks/apiHooks/usePromoterCardGivings/index.ts","../src/hooks/apiHooks/useSources/index.ts","../src/hooks/apiHooks/useStories/index.ts","../src/hooks/apiHooks/useUsers/index.ts"],"sourcesContent":["export function logError(error: any, context: any): void {\n  if (process.env.NODE_ENV !== \"production\") {\n    return;\n  }\n\n  console.log(error, context);\n}\n","import { useQuery, UseQueryOptions } from \"react-query\";\nimport { logError } from \"services/crashReport\";\nimport { AxiosResponse } from \"axios\";\n\ninterface Props {\n  key: string;\n  fetchMethod(): Promise<AxiosResponse>;\n  options?: UseQueryOptions<any, Error, any>;\n}\nexport function useApi<T>({ key, fetchMethod, options }: Props) {\n  const { isLoading, error, data, refetch } = useQuery<T, Error>(\n    key,\n    async () => {\n      const { data: fetchData } = await fetchMethod();\n      if (error)\n        logError(error, {\n          customMessage: `An error occurred when fetching ${key}`,\n        });\n\n      return fetchData;\n    },\n    options,\n  );\n\n  return {\n    isLoading,\n    error,\n    data,\n    refetch,\n  };\n}\n","import React from 'react';\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\ntype Props = {\n  children: React.ReactNode;\n}\n\nexport default function QueryClientComponent({ children }: Props) {\n  const queryClient = new QueryClient();\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n}\n","import { useApi } from 'hooks/useApi';\nimport usersApi from 'services/api/usersApi';\nimport CanDonate from 'types/apiResponses/CanDonate';\nimport { emptyRequest } from 'services/api';\n\nfunction useCanDonate(integrationId: number | string | null) {\n  const {\n    data: canDonate,\n    isLoading,\n    refetch,\n  } = useApi<CanDonate>({\n    key: 'canDonate',\n    fetchMethod: () => {\n      if (integrationId) return usersApi.postCanDonate(integrationId);\n\n      return emptyRequest();\n    },\n    options: {\n      enabled: !!integrationId,\n    },\n  });\n\n  function formattedCanDonate() {\n    if (canDonate === undefined) return true;\n\n    return canDonate.canDonate;\n  }\n\n  return { canDonate: formattedCanDonate(), isLoading, refetch };\n}\n\nexport default useCanDonate;\n","import { useApi } from \"hooks/useApi\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport CardFees from \"types/apiResponses/CardFees\";\nimport givingFeesApi from \"services/api/givingFeesApi\";\n\nfunction useCardGivingFees(value: number, currency: Currencies) {\n  const {\n    data: cardGivingFees,\n    isLoading,\n    refetch,\n  } = useApi<CardFees>({\n    key: \"cardGivingFees\",\n    fetchMethod: () => givingFeesApi.postCardFees(value, currency),\n    options: {\n      enabled: value > 0,\n    },\n  });\n\n  return { cardGivingFees, isLoading, refetch };\n}\n\nexport default useCardGivingFees;\n","import causesApi from \"services/api/causesApi\";\nimport Cause from \"types/entities/Cause\";\nimport { useApi } from \"../../useApi\";\n\nfunction useCauses() {\n  const {\n    data: causes,\n    isLoading,\n    refetch,\n  } = useApi<Cause[]>({\n    key: \"causes\",\n    fetchMethod: () => causesApi.getCauses(),\n  });\n\n  async function getCause(causeId: number) {\n    const { data: cause } = await causesApi.getCause(causeId);\n\n    return cause;\n  }\n\n  return {\n    causes: causes || [],\n    getCause,\n    isLoading,\n    refetch,\n  };\n}\n\nexport default useCauses;\n","import cryptoTransactionApi from \"services/api/cryptoTransactionsApi\";\nimport { TransactionStatus } from \"types/enums/TransactionStatus\";\n\nfunction useCryptoTransaction() {\n  async function createTransaction(\n    transactionHash: string,\n    amount: string,\n    walletAddress: string,\n    integrationId: string | number,\n  ) {\n    const { data: transaction } = await cryptoTransactionApi.postTransaction(\n      transactionHash,\n      amount,\n      walletAddress,\n      integrationId,\n    );\n\n    return transaction;\n  }\n\n  async function updateTransactionStatus(\n    transactionHash: string,\n    status: TransactionStatus,\n  ) {\n    const { data: transaction } =\n      await cryptoTransactionApi.putTransactionStatus(transactionHash, status);\n\n    return transaction;\n  }\n\n  return {\n    createTransaction,\n    updateTransactionStatus,\n  };\n}\n\nexport default useCryptoTransaction;\n","import donationsApi from \"services/api/donationsApi\";\nimport impactApi from \"services/api/impactApi\";\nimport { useApi } from \"hooks/useApi\";\nimport DonationsCount from \"types/apiResponses/DonationsCount\";\n\nfunction useDonations(userId: number | undefined) {\n  const { data: donationsCountResponse } = useApi<DonationsCount>({\n    key: \"donationsCount\",\n    fetchMethod: () => {\n      const id = userId || null;\n      return impactApi.getDonationsCount(id);\n    },\n    options: {\n      enabled: !!userId,\n    },\n  });\n\n  async function donate(\n    integrationId: number,\n    nonProfitId: number,\n    email: string,\n    externalId?: string,\n  ) {\n    if (externalId) {\n      await donationsApi.postVoucherDonation(\n        integrationId,\n        nonProfitId,\n        email,\n        externalId,\n      );\n\n      return;\n    }\n\n    await donationsApi.postDonation(integrationId, nonProfitId, email);\n  }\n\n  return {\n    donate,\n    donationsCount: donationsCountResponse?.donationsCount,\n  };\n}\n\nexport default useDonations;\n","import impactApi from \"services/api/impactApi\";\nimport { useApi } from \"hooks/useApi\";\nimport Impact from \"types/entities/Impact\";\n\nfunction useImpact(userId: number | undefined) {\n  const { data: userImpact } = useApi<Impact[]>({\n    key: \"impacts\",\n    fetchMethod: () => {\n      const id = userId || null;\n      return impactApi.getImpact(id);\n    },\n    options: {\n      enabled: !!userId,\n    },\n  });\n\n  return {\n    userImpact,\n  };\n}\n\nexport default useImpact;\n","import { useApi } from 'hooks/useApi';\nimport integrationsApi from 'services/api/integrationsApi';\nimport Integration from 'types/entities/Integration';\nimport { setLocalStorageItem } from 'lib/localStorage';\n\nfunction useIntegration(integrationId: number | string | null | undefined) {\n  if (!integrationId) {\n    setLocalStorageItem('integrationName', 'undefined');\n    return {\n      integration: {} as Integration,\n      isLoading: true,\n      refetch: () => {},\n    };\n  }\n\n  const {\n    data: integration,\n    isLoading,\n    refetch,\n    error,\n  } = useApi<Integration>({\n    key: 'integration',\n    fetchMethod: () => integrationsApi.getIntegration(integrationId),\n    options: {\n      enabled: !!integrationId,\n    },\n  });\n\n  if (error) {\n    setLocalStorageItem('integrationName', 'error');\n  }\n\n  if (integration) {\n    setLocalStorageItem('integrationName', integration.name);\n  }\n\n  return { integration, isLoading, refetch, error };\n}\n\nexport default useIntegration;\n","import { useApi } from 'hooks/useApi';\nimport integrationsApi from 'services/api/integrationsApi';\nimport IntegrationImpact from 'types/apiResponses/IntegrationImpact';\n\nfunction useIntegrationImpact(\n  integrationId: number | string | null | undefined,\n  startDate: string,\n  endDate: string,\n) {\n  if (!integrationId) {\n    return {\n      integrationImpact: {} as IntegrationImpact,\n      isLoading: true,\n      refetch: () => {},\n    };\n  }\n\n  const {\n    data: integrationImpact,\n    isLoading,\n    refetch,\n    error,\n  } = useApi<IntegrationImpact>({\n    key: 'integrationImpact',\n    fetchMethod: () =>\n      integrationsApi.getIntegrationImpact(integrationId, startDate, endDate),\n    options: {\n      enabled: !!integrationId,\n    },\n  });\n\n  return { integrationImpact, isLoading, refetch, error };\n}\n\nexport default useIntegrationImpact;\n","import { useApi } from \"hooks/useApi\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport nonProfitImpactApi from \"services/api/nonProfitImpactApi\";\nimport NonProfitImpact from \"types/apiResponses/NonProfitImpact\";\nimport { emptyRequest } from \"services/api\";\n\nfunction useNonProfitImpact(\n  nonProfitId?: number,\n  value?: number,\n  currency?: Currencies,\n) {\n  const {\n    data: nonProfitImpact,\n    isLoading,\n    refetch,\n  } = useApi<NonProfitImpact>({\n    key: `nonProfitImpact${nonProfitId}`,\n    fetchMethod: () => {\n      if (nonProfitId && value && currency)\n        return nonProfitImpactApi.postImpactByNonProfit(\n          nonProfitId,\n          value,\n          currency,\n        );\n\n      return emptyRequest();\n    },\n    options: {\n      enabled: !!nonProfitId && !!value && !!currency,\n    },\n  });\n\n  return { nonProfitImpact, isLoading, refetch };\n}\n\nexport default useNonProfitImpact;\n","import { AxiosResponse } from \"axios\";\nimport NonProfit from \"types/entities/NonProfit\";\nimport { apiGet } from \"..\";\n\nconst nonProfitsApi = {\n  getNonProfits: (): Promise<AxiosResponse<NonProfit[]>> =>\n    apiGet(\"non_profits\"),\n};\n\nexport default nonProfitsApi;\n","import { useApi } from \"hooks/useApi\";\nimport nonProfitsApi from \"services/api/nonProfitsApi\";\nimport NonProfit from \"types/entities/NonProfit\";\n\nfunction useNonProfits() {\n  const {\n    data: nonProfits,\n    isLoading,\n    refetch,\n  } = useApi<NonProfit[]>({\n    key: \"nonProfits\",\n    fetchMethod: nonProfitsApi.getNonProfits,\n  });\n\n  return { nonProfits, isLoading, refetch };\n}\n\nexport default useNonProfits;\n","import offersApi from \"services/api/offersApi\";\nimport Offer from \"types/entities/Offer\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport { useApi } from \"../../useApi\";\n\nfunction useOffers(currency: Currencies, subscription = false) {\n  const {\n    data: offers,\n    isLoading,\n    refetch,\n  } = useApi<Offer[]>({\n    key: \"offers\",\n    fetchMethod: () => offersApi.getOffers(currency, subscription),\n  });\n\n  async function getOffer(offerId: number) {\n    const { data: offer } = await offersApi.getOffer(offerId);\n\n    return offer;\n  }\n\n  return {\n    offers: offers || [],\n    getOffer,\n    isLoading,\n    refetch,\n  };\n}\n\nexport default useOffers;\n","import promoterCardGivingsApi from \"services/api/promoterCardGivingsApi\";\nimport PromoterCardGiving from \"types/apiResponses/PromoterCardGiving\";\nimport { Currencies } from \"types/enums/Currencies\";\nimport { useApi } from \"../../useApi\";\n\nfunction usePromoterCardGivings(\n  email: string | undefined,\n  currency: Currencies,\n) {\n  const {\n    data: promoterCardGivings,\n    isLoading,\n    refetch,\n  } = useApi<PromoterCardGiving[]>({\n    key: \"promoterCardGivings\",\n    fetchMethod: () =>\n      promoterCardGivingsApi.getPromoterCardGivings(email, currency),\n    options: {\n      enabled: !!email,\n    },\n  });\n\n  return {\n    promoterCardGivings,\n    isLoading,\n    refetch,\n  };\n}\n\nexport default usePromoterCardGivings;\n","import sourcesApi from \"services/api/sourcesApi\";\n\nfunction useSources() {\n  async function createSource(userId: number, integrationId: number) {\n    const { data: source } = await sourcesApi.postCreateSource(\n      userId,\n      integrationId,\n    );\n\n    return source;\n  }\n\n  return {\n    createSource,\n  };\n}\n\nexport default useSources;\n","import storiesApi from \"services/api/storiesApi\";\n\nfunction useStories() {\n  async function fetchNonProfitStories(NonProfitId: number) {\n    const { data: stories } = await storiesApi.getNonProfitStories(NonProfitId);\n\n    return stories;\n  }\n\n  return {\n    fetchNonProfitStories,\n  };\n}\n\nexport default useStories;\n","import usersApi from \"services/api/usersApi\";\n\nfunction useUsers() {\n  async function findUser(email: string) {\n    const { data: user } = await usersApi.postSearchUser(email);\n\n    return user;\n  }\n\n  async function createUser(email: string) {\n    const { data: user } = await usersApi.postCreateUser(email);\n\n    return user;\n  }\n\n  async function findOrCreateUser(email: string) {\n    let user;\n    try {\n      user = await findUser(email);\n    } catch (e) {\n      user = await createUser(email);\n    }\n\n    return user;\n  }\n\n  return {\n    createUser,\n    findUser,\n    findOrCreateUser,\n  };\n}\n\nexport default useUsers;\n"],"names":["logError","error","context","process","env","NODE_ENV","console","log","useApi","_a","key","fetchMethod","options","_b","useQuery","fetchData","customMessage","isLoading","data","refetch","QueryClientComponent","children","queryClient","QueryClient","React","QueryClientProvider","client","useCanDonate","integrationId","usersApi","postCanDonate","emptyRequest","enabled","canDonate","undefined","useCardGivingFees","value","currency","givingFeesApi","postCardFees","cardGivingFees","useCauses","causesApi","getCauses","causes","getCause","causeId","useCryptoTransaction","createTransaction","transactionHash","amount","walletAddress","cryptoTransactionApi","postTransaction","updateTransactionStatus","status","putTransactionStatus","useDonations","userId","donationsCountResponse","id","impactApi","getDonationsCount","donate","nonProfitId","email","externalId","donationsApi","postVoucherDonation","postDonation","donationsCount","useImpact","userImpact","getImpact","useIntegration","setLocalStorageItem","integration","integrationsApi","getIntegration","name","useIntegrationImpact","startDate","endDate","integrationImpact","getIntegrationImpact","useNonProfitImpact","nonProfitImpactApi","postImpactByNonProfit","nonProfitImpact","nonProfitsApi","getNonProfits","apiGet","useNonProfits","nonProfits","useOffers","subscription","offersApi","getOffers","offers","getOffer","offerId","usePromoterCardGivings","promoterCardGivingsApi","getPromoterCardGivings","promoterCardGivings","useSources","createSource","sourcesApi","postCreateSource","useStories","fetchNonProfitStories","NonProfitId","storiesApi","getNonProfitStories","useUsers","findUser","postSearchUser","createUser","postCreateUser","findOrCreateUser","user"],"mappings":"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"}